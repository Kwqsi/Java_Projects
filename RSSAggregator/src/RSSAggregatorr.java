import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Kwasi Fosu
 *
 */
public final class RSSAggregatorr {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregatorr() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //creating xml title, title's text, and the label of that
        XMLTree title = channel.child(getChildElement(channel, "title"));
        XMLTree titleText = title.child(0);
        String label = titleText.label();

        //outprinting html for header
        out.print("<html>");
        out.print("<head>");
        out.print("<title>");
        out.print(label);
        out.println("</title>");
        out.print("</head>");
        out.println("<body>");
        //outprinting html for link of header
        XMLTree link = channel.child(getChildElement(channel, "link"));
        XMLTree linkText = link.child(0);
        String label2 = linkText.label();
        out.print("<h1>");
        out.print("<a href =" + "\"" + label2 + "\"" + ">");
        out.print(label);
        out.print("</a>");
        out.println("</h1>");
        out.println("<p>");
//outprinting description
        XMLTree description = channel
                .child(getChildElement(channel, "description"));
        XMLTree descriptionText = description.child(0);
        String label3 = descriptionText.label();
        out.println(label3);

        //outprinting table
        out.println("</p>");
        out.print("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

        /*
         * TODO: fill in body
         */

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
//printing footer of html
        out.println("</table>");
        ;
        out.println("</body> </html>");

        /*
         * TODO: fill in body
         */
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
// loop to find index of whatever tag is entered
        int index = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {

            XMLTree child = xml.child(i);
            String label = child.label();
            if (label.equals(tag)) {
                index = i;
            }

        }

        return index;

        /*
         * TODO: fill in body
         */
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
//initializing index variables
        int dateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");
        int linkIndex = getChildElement(item, "link");
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");

        out.println("<tr>");
//if statements for when dateIndex exists or does not exist
        if (dateIndex != -1) {

            out.println("<td>" + item.child(dateIndex).child(0) + "</td>");

        } else {
            out.println("<td>No date available</td>");
        }
//if statements for when sourceIndex exists or does not exist
        if (sourceIndex != -1
                && item.child(sourceIndex).numberOfChildren() > 0) {

            out.println("<td>" + "<a href =\""
                    + item.child(sourceIndex).attributeValue("url") + "\">"
                    + item.child(sourceIndex).child(0).label() + "</a></td>");
        }

        else {
            out.println("<td>No source available</td>");
        }

//if statements for when linkIndex does not exist
        out.println("<td>");

        if (linkIndex == -1) {

            if (titleIndex != -1
                    && item.child(titleIndex).numberOfChildren() > 0) {

                out.println(item.child(titleIndex).child(0).label() + "</td>");
            }

            else if (descriptionIndex != -1
                    && item.child(descriptionIndex).numberOfChildren() > 0) {

                out.println(item.child(descriptionIndex).child(0).label()
                        + "</td>");

            }

            else {

                out.println("No title available</td>");

            }

        }
        //if statements for when linkIndex exists
        if (linkIndex != -1) {

            out.println("<a href =\"" + item.child(linkIndex).child(0).label()
                    + "\">");
        }
        //if statements for when titleIndex exists or does not
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {

            out.println(item.child(titleIndex).child(0).label() + "</a></td>");
        }
        //if statements for when descriptionIndex exists or does not
        else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {

            out.println(item.child(descriptionIndex).child(0).label()
                    + "</a></td>");

        }

        else {

            out.println("No title available</a></td>");

        }

        /*
         * TODO: fill in body
         */
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree xml = new XMLTree1(url);

        SimpleWriter fileOut2 = new SimpleWriter1L(file);

        String version = "";
        //if statements that allow code to run for valid "2.0" RSS
        //establishes if RSS exists
        if (xml.hasAttribute("version")) {
            version = xml.attributeValue("version");

        }

        if (xml.isTag() && version.equals("2.0")) {
            XMLTree channel = xml.child(0);
            //begin html
            outputHeader(channel, fileOut2);
            //loop that runs continuously to search each item
            for (int i = 0; i < channel.numberOfChildren(); i++) {

                if (channel.child(i).label().equals("item")) {

                    processItem(channel.child(i), fileOut2);

                }

            }
            //end html
            outputFooter(fileOut2);

        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        //initializing writers and readers
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

//prompting user
        out.print("Enter XML File: ");
        String userInput = in.nextLine();
        XMLTree userXML = new XMLTree1(userInput);

        out.print("Enter a name for a file followed by .html: ");
        String userHTML = in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(userHTML);

        fileOut.println("<html>");
        fileOut.println("<head>");
        fileOut.print("<title>");
        fileOut.println(userXML.attributeValue("title"));
        fileOut.println("</title>");
        fileOut.println("</head>");
        fileOut.println("<body>");
        fileOut.print("<h2>");
        fileOut.print(userXML.attributeValue("title"));
        fileOut.print("</h2>");
        fileOut.println("<ul>");

        for (int i = 0; i < userXML.numberOfChildren(); i++) {
            String url = userXML.child(i).attributeValue("url");
            String file = userXML.child(i).attributeValue("file");
            String name = userXML.child(i).attributeValue("name");

            //String url = userXML.child(i).attributeValue("url");

            processFeed(url, file, out);

            fileOut.println(
                    "<li><a href=\"" + file + "\">" + name + "</a></li>");

        }
        fileOut.println("</ul>");
        fileOut.println("</body>");
        fileOut.println("</html>");

        /*
         * TODO: fill in body
         */
//closing file and readers/writers
        in.close();
        out.close();
        fileOut.close();
    }

}
